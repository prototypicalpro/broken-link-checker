{"version":3,"sources":["../../lib/internal/Link.js"],"names":["ORIGINAL_URL","RESOLVED_URL","REBASED_URL","REDIRECTED_URL","RESOLVED_BASE_URL","REBASED_BASE_URL","HTML_INDEX","HTML_OFFSET_INDEX","HTML_LOCATION","HTML_SELECTOR","HTML_TAG_NAME","HTML_ATTR_NAME","HTML_ATTRS","HTML_TEXT","HTML_TAG","HTML_BASE_HREF","HTTP_RESPONSE","HTTP_RESPONSE_WAS_CACHED","IS_BROKEN","IS_INTERNAL","IS_SAME_PAGE","WAS_EXCLUDED","BROKEN_REASON","EXCLUDED_REASON","Link","Map","constructor","link","keysAsList","forEach","key","set","break","reasonKey","reasons","exclude","include","mend","redirect","url","parseURL","resolve","base","autoPrefix","isURL","lenient","href","hash","rebased","get","value","keysAsKeys","TypeError","undefined","toJSON","Object","fromEntries","Array","from","entries","relation","URLRelation","upTo","HOST","PATH","keysAsValues","values","reduce","result","autoprefix","URL","length","pattern","prefix","test","freeze"],"mappings":"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","sourcesContent":["import * as reasons from \"./reasons\";\nimport isURL from \"isurl\";\nimport URLRelation from \"url-relation\";\n\n\n\nexport const ORIGINAL_URL = \"originalURL\";      // The URL string as it was inputted\nexport const RESOLVED_URL = \"resolvedURL\";      // The `URL`, resolved with `RESOLVED_BASE_URL`\nexport const REBASED_URL = \"rebasedURL\";        // The `URL`, resolved with `REBASED_BASE_URL`\nexport const REDIRECTED_URL = \"redirectedURL\";  // The `URL`, after its last redirection, if any\n\nexport const RESOLVED_BASE_URL = \"resolvedBaseURL\";  // The base `URL`\nexport const REBASED_BASE_URL = \"rebasedBaseURL\";    // The base `URL`, resolved with `HTML_BASE_HREF`\n\nexport const HTML_INDEX = \"htmlIndex\";               // The order in which the link appeared in its document -- using max-level tag filter\nexport const HTML_OFFSET_INDEX = \"htmlOffsetIndex\";  // Sequential (gap-free) indices for skipped and unskipped links\nexport const HTML_LOCATION = \"htmlLocation\";         // Source code location of the attribute that the link was found within\nexport const HTML_SELECTOR = \"htmlSelector\";         // CSS selector for element in document\nexport const HTML_TAG_NAME = \"htmlTagName\";          // Tag name that the link was found on\nexport const HTML_ATTR_NAME = \"htmlAttrName\";        // Attribute name that the link was found within\nexport const HTML_ATTRS = \"htmlAttrs\";               // All attributes on the element\nexport const HTML_TEXT = \"htmlText\";                 // TextNodes/innerText of the element\nexport const HTML_TAG = \"htmlTag\";                   // The entire tag string\nexport const HTML_BASE_HREF = \"htmlBaseHref\";        // The document's `<base href>` value\n\nexport const HTTP_RESPONSE = \"httpResponse\";                      // The request response\nexport const HTTP_RESPONSE_WAS_CACHED = \"httpResponseWasCached\";  // If the response was from cache\n\nexport const IS_BROKEN = \"isBroken\";        // If the link was determined to be broken or not\nexport const IS_INTERNAL = \"isInternal\";    // If the link is to the same host as its base/document\nexport const IS_SAME_PAGE = \"isSamePage\";   // If the link is to the same page as its base/document\nexport const WAS_EXCLUDED = \"wasExcluded\";  // If the link was excluded due to any filtering\n\nexport const BROKEN_REASON = \"brokenReason\";      // The reason why the link was considered broken, if it indeed is\nexport const EXCLUDED_REASON = \"excludedReason\";  // The reason why the link was excluded from being checked, if it indeed was\n\n\n\nexport default class Link extends Map\n{\n\t/**\n\t * @param {Link} [link]\n\t */\n\tconstructor(link)\n\t{\n\t\tsuper(link);\n\n\t\tif (!(link instanceof Link))\n\t\t{\n\t\t\t// Default values\n\t\t\tkeysAsList.forEach(key => super.set(key, null));\n\t\t}\n\t}\n\n\n\t/**\n\t * Change state to \"broken\" with a reason.\n\t * @param {string} reasonKey\n\t * @returns {Link}\n\t */\n\tbreak(reasonKey)\n\t{\n\t\tif (!(reasonKey in reasons))\n\t\t{\n\t\t\treasonKey = \"BLC_UNKNOWN\";\n\t\t}\n\n\t\tsuper.set(IS_BROKEN, true);\n\t\tsuper.set(BROKEN_REASON, reasonKey);\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Change state to \"excluded\" with a reason.\n\t * @param {string} reasonKey\n\t * @returns {Link}\n\t */\n\texclude(reasonKey)\n\t{\n\t\tsuper.set(WAS_EXCLUDED, true);\n\t\tsuper.set(EXCLUDED_REASON, reasonKey);\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Change state to \"not excluded\" and remove any previous reason for being otherwise.\n\t * @returns {Link}\n\t */\n\tinclude()\n\t{\n\t\tsuper.set(WAS_EXCLUDED, false);\n\t\tsuper.set(EXCLUDED_REASON, null);\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Change state to \"not broken\" and remove any previous reason for being otherwise.\n\t * @returns {Link}\n\t */\n\tmend()\n\t{\n\t\tsuper.set(IS_BROKEN, false);\n\t\tsuper.set(BROKEN_REASON, null);\n\t\treturn this;\n\t}\n\n\n\t/**\n\t * Assign a redirected URL and change any relative state.\n\t * @param {URL|string} url\n\t * @returns {Link}\n\t */\n\tredirect(url)\n\t{\n\t\tsuper.set(REDIRECTED_URL, parseURL(url));\n\n\t\tthis.#relateWithBase();\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Reassign properties associated with state relative to the link's environment.\n\t */\n\t#relateWithBase()\n\t{\n\t\tconst url = super.get(REDIRECTED_URL) ?? super.get(REBASED_URL);\n\n\t\t// If impossible to determine is linked to same server/etc\n\t\tif (url===null || super.get(RESOLVED_BASE_URL)===null)\n\t\t{\n\t\t\t// Overwrite any previous values\n\t\t\tsuper.set(IS_INTERNAL, null);\n\t\t\tsuper.set(IS_SAME_PAGE, null);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Rebased base URL not used because `<base href>` URL could be remote\n\t\t\t// @todo common/careful profile\n\t\t\t// @todo auth shouldn't affect this\n\t\t\tconst relation = new URLRelation(url, super.get(RESOLVED_BASE_URL));\n\n\t\t\tsuper.set(IS_INTERNAL,     relation.upTo(URLRelation.HOST));\n\t\t\tsuper.set(IS_SAME_PAGE, relation.upTo(URLRelation.PATH));\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Produce and assign an absolute URL and change any relative state.\n\t * @param {URL|string} url\n\t * @param {URL|string} base\n\t * @param {{pattern: RegExp, prefix: string}[]} [autoPrefix]\n\t * @returns {Link}\n\t */\n\tresolve(url, base, autoPrefix = null)\n\t{\n\t\tif (url != null)\n\t\t{\n\t\t\t// Parse or clone\n\t\t\tbase = parseURL(base, null, autoPrefix);\n\n\t\t\tif (isURL.lenient(url))\n\t\t\t{\n\t\t\t\tsuper.set(ORIGINAL_URL, url.href);\n\t\t\t\tsuper.set(RESOLVED_URL, url);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsuper.set(ORIGINAL_URL, url);\n\t\t\t\tsuper.set(RESOLVED_URL, parseURL(url, null, autoPrefix));\n\t\t\t}\n\n\t\t\tif (base !== null)\n\t\t\t{\n\t\t\t\t// Remove any hash since it's useless in a base -- safe to mutate\n\t\t\t\tbase.hash = \"\";\n\n\t\t\t\tconst rebased = parseURL(super.get(HTML_BASE_HREF), base);\n\n\t\t\t\tsuper.set(REBASED_BASE_URL, rebased ?? base);\n\t\t\t\tsuper.set(RESOLVED_BASE_URL, base);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsuper.set(REBASED_BASE_URL, parseURL(super.get(HTML_BASE_HREF)));\n\t\t\t}\n\n\t\t\tif (super.get(REBASED_BASE_URL) !== null)\n\t\t\t{\n\t\t\t\t// Remove any hash since it's useless in a base -- safe to mutate\n\t\t\t\tsuper.get(REBASED_BASE_URL).hash = \"\";\n\n\t\t\t\tif (super.get(RESOLVED_URL) === null)\n\t\t\t\t{\n\t\t\t\t\tsuper.set(RESOLVED_URL, parseURL(url, super.get(RESOLVED_BASE_URL), autoPrefix));\n\t\t\t\t\tsuper.set(REBASED_URL,  parseURL(url, super.get(REBASED_BASE_URL), autoPrefix));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tsuper.set(REBASED_URL, super.get(RESOLVED_URL));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tsuper.set(REBASED_URL, super.get(RESOLVED_URL));\n\t\t\t}\n\n\t\t\t// @todo move relation stuff out of this function -- separation of concerns?\n\t\t\tthis.#relateWithBase();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\n\n\t/**\n\t * Assign a value to a supported key.\n\t * @param {symbol} key\n\t * @param {*} value\n\t * @throws {TypeError} unsupported key or undefined value\n\t * @returns {Link}\n\t */\n\tset(key, value)\n\t{\n\t\tif (!(key in keysAsKeys))\n\t\t{\n\t\t\tthrow new TypeError(\"Invalid key\");\n\t\t}\n\t\telse if (value === undefined)\n\t\t{\n\t\t\tthrow new TypeError(\"Invalid value\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn super.set(key, value);\n\t\t}\n\t}\n\n\n\n\t/**\n\t * Produce a key-value object for `JSON.stringify()`.\n\t * @returns {object}\n\t */\n\ttoJSON()\n\t{\n\t\t// @todo https://github.com/tc39/proposal-pipeline-operator\n\t\treturn Object.fromEntries(Array.from(super.entries()));\n\t}\n}\n\n\n\nconst keysAsValues =\n{\n\tBROKEN_REASON,\n\tEXCLUDED_REASON,\n\tHTML_ATTR_NAME,\n\tHTML_ATTRS,\n\tHTML_BASE_HREF,\n\tHTML_INDEX,\n\tHTML_LOCATION,\n\tHTML_OFFSET_INDEX,\n\tHTML_SELECTOR,\n\tHTML_TAG,\n\tHTML_TAG_NAME,\n\tHTML_TEXT,\n\tHTTP_RESPONSE,\n\tHTTP_RESPONSE_WAS_CACHED,\n\tIS_BROKEN,\n\tIS_INTERNAL,\n\tIS_SAME_PAGE,\n\tORIGINAL_URL,\n\tREBASED_BASE_URL,\n\tREBASED_URL,\n\tREDIRECTED_URL,\n\tRESOLVED_BASE_URL,\n\tRESOLVED_URL,\n\tWAS_EXCLUDED\n};\n\n\n\nconst keysAsList = Object.values(keysAsValues);\n\n\n\nconst keysAsKeys = keysAsList.reduce((result, value) =>\n{\n\tresult[value] = true;  // memoized value\n\treturn result;\n}, {});\n\n\n\n/**\n * Parse or clone a URL.\n * @param {URL|string|null} [url]\n * @param {URL|string|null} [base]\n * @param {{pattern: RegExp, prefix: string}[]} [autoprefix] Whether or not to automatically attempt adding https:// to the URL if parsing fails.\n * @returns {URL|null}\n */\nconst parseURL = (url=null, base, autoprefix=null) =>\n{\n\tif (url !== null)\n\t{\n\t\ttry\n\t\t{\n\t\t\turl = new URL(url, base || undefined);\n\t\t}\n\t\tcatch\n\t\t{\n\t\t\tif (!isURL.lenient(url) && autoprefix?.length > 0) {\n\t\t\t\tfor (const {pattern, prefix} of autoprefix) {\n\t\t\t\t\tif (pattern.test(url)) {\n\t\t\t\t\t\ttry { \n\t\t\t\t\t\t\turl = new URL(`${prefix}${url}`);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch { }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!isURL.lenient(url))\n\t\turl = null;\n\n\treturn url;\n};\n\n\n\nObject.freeze(Link);\n"],"file":"Link.js"}